from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from selenium.webdriver.firefox.service import Service as FirefoxService
from webdriver_manager.firefox import GeckoDriverManager

from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager

from utils.auth import IGNORED_EXCEPTIONS, login
from utils.file_handler import FileHandler

import time
import logging
import os
import argparse

# Configuracao do logging
logging.basicConfig(
    filename='pentest.log',
    filemode='a',  # Append to the log file. Use 'w' to overwrite.
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO  # Set the logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
)

parser = argparse.ArgumentParser(description='Escolha o navegador para executar.')

group = parser.add_mutually_exclusive_group(required=False)
group.add_argument('--firefox', action='store_true', help='Executa com o Firefox')
group.add_argument('--chrome', action='store_true', help='Executa com o Chrome')

args = parser.parse_args()

if args.chrome:
    options = webdriver.ChromeOptions()
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
else:
    driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))

driver.maximize_window()
driver.get("https://sigaa.ufpb.br/sigaa/public/home.jsf")
time.sleep(3)
acessar_tela = WebDriverWait(driver, 20, ignored_exceptions=IGNORED_EXCEPTIONS).until(
    EC.element_to_be_clickable((By.XPATH, '//*[@title="Acessar o SIGAA"]'))
)
acessar_tela.click()
time.sleep(2)

# Logins
file_handler = FileHandler(os.path.join("data", "matriculas_feras.txt"))
users = file_handler.get_users()
matriculas = file_handler.get_matriculas()

for user, mat in zip(users, matriculas):
    login(driver, user, mat)
    login(driver, user, user)